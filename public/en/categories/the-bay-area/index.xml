<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>the-bay-area on Circle: Build your own system</title>
    <link>https://usistem.com/en/categories/the-bay-area/</link>
    <description>Recent content in the-bay-area on Circle: Build your own system</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 12 Apr 2023 15:00:33 +0800</lastBuildDate><atom:link href="https://usistem.com/en/categories/the-bay-area/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bay Area Weekly Issue 4</title>
      <link>https://usistem.com/en/the-bay-area/the-bay-area-weekly-04/</link>
      <pubDate>Wed, 12 Apr 2023 15:00:33 +0800</pubDate>
      
      <guid>https://usistem.com/en/the-bay-area/the-bay-area-weekly-04/</guid>
      <description><p>Bay Area Weekly is maintained by <a href="https://twitter.com/hagerhu" target="_blank" rel="noopener">@HagerHu</a>
, focus on the internet, technology, and startup. Reading original english article, make progress weekly.</p>
<hr>
<h3 id="i-cant-work-fromhomehttpscmcnmelinktargethttpsjustinjacksoncawfh"><a href="https://cmcn.me/link?target=https://justinjackson.ca/wfh" target="_blank" rel="noopener">I CAN&#39;T WORK FROM HOME</a>
</h3>
<p>Justin Jackson, is about working from home and provides tips and advice for those who are new to remote work or struggling with it. The author draws on his own experience as a remote worker and shares insights and best practices he has learned over the years.</p>
<h2 id="looking-back-on-ghosts-growth-with-john-onolanhttpscmcnmelinktargethttpswwwproducthuntcomstorieslooking-back-on-ghost-s-growth-with-john-o-nolan"><a href="https://cmcn.me/link?target=https://www.producthunt.com/stories/looking-back-on-ghost-s-growth-with-john-o-nolan" target="_blank" rel="noopener">Looking back on Ghost&#39;s growth with John O&#39;Nolan</a>
</h2>
<p>John O&rsquo;Nolan, the founder of Ghost, reflects on the growth of the platform since its launch in 2013. He discusses the challenges the company faced, such as raising funds and finding the right team, and shares insights into the company&rsquo;s product development and marketing strategies.</p>
<h2 id="how-to-become-a-full-time-creatorhttpscmcnmelinktargethttpsblogpragmaticengineercomhow-to-become-a-full-time-creator"><a href="https://cmcn.me/link?target=https://blog.pragmaticengineer.com/how-to-become-a-full-time-creator/" target="_blank" rel="noopener">How to become a full time creator</a>
</h2>
<p>Gergely Orosz&rsquo;s <a href="https://newsletter.pragmaticengineer.com/" target="_blank" rel="noopener">The Pragmatic Engineer</a>
 newsletter is the #1 paid technology newsletter on Substack. This article provides advice and tips for those interested in becoming a full-time creator, including strategies for developing a product, building an audience, and monetizing one&rsquo;s work. The author draws on his own experience as a full-time creator and shares insights and best practices he has learned over the years.</p>
<h2 id="why-youre-approaching-your-habits-all-wronghttpscmcnmelinktargethttpswwwproducthuntcomstorieswhy-you-re-approaching-your-habits-all-wrong-a-look-at-justin-kan-s-latest-app"><a href="https://cmcn.me/link?target=https://www.producthunt.com/stories/why-you-re-approaching-your-habits-all-wrong-a-look-at-justin-kan-s-latest-app" target="_blank" rel="noopener">Why you’re approaching your habits all wrong</a>
</h2>
<p>MyMind, is an application which aims to help people improve their habits by combining cognitive behavioral therapy (CBT) and best practices for habit formation. The article highlights common mistakes people make when trying to change their habits and how MyMind addresses these issues by providing personalized feedback and guidance based on the user&rsquo;s goals and values.</p>
</description>
    </item>
    
    <item>
      <title>Bay Area Weekly Issue 4</title>
      <link>https://usistem.com/en/the-bay-area/the-bay-area-weekly-05/</link>
      <pubDate>Wed, 12 Apr 2023 15:00:33 +0800</pubDate>
      
      <guid>https://usistem.com/en/the-bay-area/the-bay-area-weekly-05/</guid>
      <description><p>这是 <a href="https://cmcn.me/link?target=https://twitter.com/hagerhu" target="_blank" rel="noopener">@HagerHu</a>
 维护的「湾区周报」的第 5 期。湾区周报，关注湾区互联网、科技和创业；阅读英文优质文章，每周进步一点点。</p>
<hr>
<h3 id="how-an-excel-tiktoker-manifested-her-way-to-making-six-figures-a-day">How an Excel Tiktoker manifested her way to making six figures a day</h3>
<p><a href="https://cmcn.me/link?target=https://www.theverge.com/22807858/tiktok-influencer-microsoft-excel-instagram-decoder-podcast" target="_blank" rel="noopener">原文链接</a>
</p>
<p>The way Kat run miss excel and structure her business is through energetics. This is what she did for creating, “I get my energy to a place where my presence is truly magnetic and I will get visions of what will go viral. Then I run to my computer and I make those ideas because essentially social media content is straight-up energy transmissions. You’re receiving my energy through the phone.”</p>
<h3 id="no-meetings-no-deadlines-no-full-time-employees">No Meetings, No Deadlines, No Full-Time Employees</h3>
<p><a href="https://cmcn.me/link?target=https://sahillavingia.com/work" target="_blank" rel="noopener">原文链接</a>
</p>
<p>Gumroad Founder @shl shared the thought of transition from full employee to remote workers. The ability to focus on actual work creates a virtuous circle benefiting both the company and the workers: 1) the company does not have to pay expensive engineers to sit around in endless, useless meetings, and 2) the engineers get to do more and learn more, which benefits them in the long term.</p>
<h3 id="a-former-facebook-vp-thinks-investing-in-humans-is-the-future-of-vc">A Former Facebook VP Thinks Investing in Humans Is the Future of VC</h3>
<p><a href="https://cmcn.me/link?target=https://www.vice.com/en/article/7kb9mg/a-former-facebook-vp-thinks-investing-in-humans-is-the-future-of-vc" target="_blank" rel="noopener">原文链接</a>
</p>
<p>What if instead of investing in companies, you could invest in people? The decision to invest directly in humans brings about a host of legal, ethical, and moral questions that Lessin will surely need to confront head-on. The idea that someone might sign a 30-year employment contract and that society should explicitly value a human brings up questions of indentured servitude.</p>
<h3 id="what-i-learned-writing-750-words-every-day-for-100-days">what I learned writing 750 words every day for 100 days</h3>
<p><a href="https://cmcn.me/link?target=https://medium.com/100daysofwriting/day-100-what-i-learned-writing-750-words-every-day-for-100-days-1f43d62e34c9" target="_blank" rel="noopener">原文链接</a>
</p>
<p>The only way to get better at something is to keep doing it. Focus on the process and not the product. Focus on the process, and sooner or later, the product will follow. Do what makes you feel comfortable, but find some way to track your efforts.</p>
<h3 id="journalling-tools-reviewed-750-words">Journalling Tools Reviewed: 750 Words</h3>
<p><a href="https://cmcn.me/link?target=https://www.becomingwhoyouare.net/journalling-tools-reviewed-750-words/" target="_blank" rel="noopener">原文链接</a>
</p>
<p>The layout of the site is reassuringly simple – there are no complex instructions to follow, once you’re logged in all you have to do is write. Once you’ve hit the target and saved your entry, you’re taken to a statistics page. These range from how many words you’ve written and how long it took, to pie charts showing how you were feeling and what you were most concerned about while writing.</p>
</description>
    </item>
    
    <item>
      <title>Bay Area Weekly Issue 3</title>
      <link>https://usistem.com/en/the-bay-area/the-bay-area-weekly-03/</link>
      <pubDate>Tue, 04 Apr 2023 17:45:33 +0800</pubDate>
      
      <guid>https://usistem.com/en/the-bay-area/the-bay-area-weekly-03/</guid>
      <description><p>Bay Area Weekly is maintained by <a href="https://cmcn.me/link?target=https://twitter.com/hagerhu" target="_blank" rel="noopener">@HagerHu</a>
, focus on the internet, technology, and startup. Reading original english article, make progress weekly.</p>
<hr>
<h2 id="one-year-of-indie-hacking">One Year of indie hacking</h2>
<p>A personal reflection on one year of indie hacking. Roehl Sybing shares his experiences, successes, and challenges, as well as insights and advice for others interested in pursuing a similar path.</p>
<p><a href="https://cmcn.me/link?target=https://roehl.dev/blog/one_year_of_indie_hacking/" target="_blank" rel="noopener">https://cmcn.me/link?target=https://roehl.dev/blog/one_year_of_indie_hacking/</a>
</p>
<h2 id="make-progress-with-systemshttpscmcnmelinktargethttpsashleyjanssencomset-direction-with-goals-make-progress-with-systems"><a href="https://cmcn.me/link?target=https://ashleyjanssen.com/set-direction-with-goals-make-progress-with-systems/" target="_blank" rel="noopener">Make progress with systems</a>
</h2>
<p>Discusses the importance of setting goals and developing systems to achieve them. Ashley Janssen emphasizes the need to focus on the process rather than the outcome, and provides tips for creating effective systems that help to make progress towards one&rsquo;s goals.</p>
<h2 id="a-guide-to-deep-work-for-foundershttpscmcnmelinktargethttpswwwproducthuntcomstoriesa-guide-to-deep-work-for-founders"><a href="https://cmcn.me/link?target=https://www.producthunt.com/stories/a-guide-to-deep-work-for-founders" target="_blank" rel="noopener">A guide to deep work for founders</a>
</h2>
<p>A guide to deep work for founders, offering practical tips and strategies for improving focus and productivity. Derrick Reimer discusses the benefits of deep work and how to create the right environment and mindset for it, as well as how to overcome common challenges and distractions.</p>
</description>
    </item>
    
    <item>
      <title>Bay Area Weekly Issue 2</title>
      <link>https://usistem.com/en/the-bay-area/the-bay-area-weekly-02/</link>
      <pubDate>Tue, 28 Mar 2023 16:53:33 +0800</pubDate>
      
      <guid>https://usistem.com/en/the-bay-area/the-bay-area-weekly-02/</guid>
      <description><p>Bay Area Weekly is maintained by <a href="https://cmcn.me/link?target=https://twitter.com/hagerhu" target="_blank" rel="noopener">@HagerHu</a>
, focus on the internet, technology, and startup. Reading original english article, make progress weekly.</p>
<hr>
<h2 id="周末项目-gumroad-的成长分享">周末项目 GumRoad 的成长分享</h2>
<p>Gumroad是一个帮助创作者在线销售数字产品的平台。在采访中，Sahil 分享了他建立 Gumroad 的过程。</p>
<p>没有什么能比现实生活中学到的经验和教训更好。有时候你只是需要行动起来，确保你快乐、享受过程，而且正在学习。</p>
<p><a href="https://cmcn.me/link?target=https://www.indiehackers.com/interview/4fc6cbc0e8" target="_blank" rel="noopener">https://cmcn.me/link?target=https://www.indiehackers.com/interview/4fc6cbc0e8</a>
</p>
<h2 id="day-one-连续记录-850-天的采访">Day One 连续记录 850 天的采访</h2>
<p>Kevin Anderson 使用 Day One 连续记录了 850天日记。记录日记让我反思并感恩每一个小日子，感受我变成了什么样的人以及我是如何成长的。通过连续记录，我能够看到所有让我到达现在这个位置的步骤，无论是向前还是向后的。</p>
<p><a href="https://cmcn.me/link?target=https://dayoneapp.com/blog/streak-story-kevin-anderson/" target="_blank" rel="noopener">https://cmcn.me/link?target=https://dayoneapp.com/blog/streak-story-kevin-anderson/</a>
</p>
<h2 id="levels-为什么关闭社交平台私信">Levels 为什么关闭社交平台私信</h2>
<p>Pieter Levels 是数字游民 NomadList 的创始人，在这篇文章中提到他为什么关闭了社交平台的私信功能，以及是如何安排自己的一天24小时的。我们每个人的一天都是24个小时，去掉睡眠、饮食、洗簌的必须时间，哪些事情是自己在意并且愿意持续投入时间去做的。</p>
<p><a href="https://cmcn.me/link?target=https://levels.io/contact/" target="_blank" rel="noopener">https://cmcn.me/link?target=https://levels.io/contact/</a>
</p>
<h2 id="目前我们所知道的-chatgpt4">目前我们所知道的 ChatGPT4</h2>
<p>OpenAI ChatGPT4 支持文字和图像输入，与GPT-3.5相比，它更可靠、更有创造力，能够处理更加微妙的指令。ChatGPT4 有些不错的想法帮助微软促进业务发展，如在 Azure 中提供 GPT 系列 API。另外，强大的人工智能技术如GPT-4的快速发展带来了一些重大的风险。</p>
<p><a href="https://cmcn.me/link?target=https://www.producthunt.com/stories/gpt-4-everything-we-know-so-far" target="_blank" rel="noopener">https://cmcn.me/link?target=https://www.producthunt.com/stories/gpt-4-everything-we-know-so-far</a>
</p>
</description>
    </item>
    
    <item>
      <title>Get started with self tracking？</title>
      <link>https://usistem.com/en/the-bay-area/get-started-with-self-tracking/</link>
      <pubDate>Wed, 22 Mar 2023 14:33:33 +0800</pubDate>
      
      <guid>https://usistem.com/en/the-bay-area/get-started-with-self-tracking/</guid>
      <description><p>This article is from：<a href="https://quantifiedself.com/get-started/" target="_blank" rel="noopener">https://quantifiedself.com/get-started/</a>
, you can read original article by clicking the link. There&rsquo;s no change of content, just there&rsquo;s no way to redirect to source directly.</p>
<hr>
<p>The purpose of this website is to support anybody who wants to use empirical methods to explore personal questions. We call this practice “everyday science.” In the decade that we’ve been working with people doing self-tracking projects, we’ve come to appreciate the diversity of motivations, methods and tools people use to gain insight into a problem or question using their own data. We’ve also seen how certain ways of approaching a project tend to lead to success, while others increase the chance of discouragement. Here we’ve tried to collect and organize some of the most useful advice about self-tracking, with a special focus on making it easy to get started.
So: How do you get started with a self-tracking project?
You can picture your project as involving four distinct activities. Although these activities blend into each other, they do each have their own particular flavor, and by outlining them separately we think we can give you a coherent and functional recipe. The activities are: Questioning, Observing, Reasoning, and Consolidating Insight.</p>
<h2 id="questioning">QUESTIONING</h2>
<p>The process of articulating your reasons to do a self-tracking project is crucially important, far more important than what gadget to use, what methods to apply, or what interventions to test. When you articulate your reasons, you clarify the criteria for choosing what to track and what tools to use. You also gain access to others in the QS community who may be able to help, because they share your interests.
Here is a list of some common motives for starting a self-tracking project, just to get you thinking. Do any of these express your goals?</p>
<ul>
<li>Increasing awareness of <em>when</em> or <em>where</em> something is happening so you can be more in control</li>
<li>Learning about the frequency and intensity of a symptom such as pain, dizziness, cramps, or allergies, to support medical treatment</li>
<li>Developing a skill, such as data visualization, by applying it to something you’re interested in</li>
<li>Creative expression using your own data</li>
<li>Tinkering with interesting hardware</li>
<li>Making progress in training for sports and fitness</li>
<li>Pacing physical therapy and/or recovery from injury</li>
</ul>
<p>All of these are good reasons for starting a self-tracking project, and there are countless others. One under-appreciated motivation of tracking is that it is just a way to think more deeply about something that’s going on in your life. People have learned something of value from tracking something as simple as books they’re reading or the music they’re listening to. Not every project has to be directly focused on solving a problem. It might just be a way to organize and deepen your thinking.
Try writing a short paragraph expressing your goals and questions. You are welcome to use the “<a href="https://forum.quantifiedself.com/c/quantified-self/Create-A-Public-Log-for-Your-QS-Project" target="_blank" rel="noopener">Project Log</a>
” section on the QS Forum to post even your earliest ideas and see if others can advise. This is an easy and powerful first step: you’ve now successfully started your self-tracking project. And if it seems odd that a self-tracking project, which often involves quantitative measurement, should begin with typing or handwriting a few sentences in a notebook, keep in mind that the lab notebook has been a core tool of science since laboratories were invented.</p>
<h2 id="observing">OBSERVING</h2>
<p>Self-tracking projects involve deliberate observations. We know this may seem trivially obvious. But we mean something specific by “deliberate observation.” That is, that you choose one or more carefully defined elements in your life to keep track of and you isolate these elements from the stream of your experience in order to give them special attention. This involves a decision: What do you want to observe?</p>
<h3 id="deciding-what-to-observe">Deciding What To Observe</h3>
<p>Choosing what to observe often involves some trial and error. Do some thought experiments first. Try to guess what the record of your observations will look like after your project gets going. Do you think there will be a pattern? How frequent will the measurements be? What would you be surprised to see? Even a very short planning phase of a quarter of an hour can yield important insights about what precisely you’d like track, giving you a way to think more clearly about whether the observations are likely to be relevant, convenient, and trustworthy.</p>
<ul>
<li><strong>Relevant</strong>: Does the observation really offer insight into what I care about?</li>
<li><strong>Convenient</strong>: Can I collect these observations easily and consistently?</li>
<li><strong>Trustworthy</strong>: How confident am I in the measurements?</li>
</ul>
<p>If your project involves biomedical measurements, your exploration of their trustworthiness may be more intense. We’ve offered some guidance for evaluating validity of biomedical devices used for self-tracking in this post: <a href="https://quantifiedself.com/blog/validating-self-tracking-devices/" target="_blank" rel="noopener">Is My Data Valid?</a>
 However, when you are just getting started you there’s no need to wade into the challenge of doing your own validation of biometric instrumentation. You can learn a lot from tracking something simple.
Here’s an example. Jakob Eg Larson, a professor of engineering and the co-organizer of QS Copenhagen, suffered from headaches. But after he started his heading tracking project he realized it was difficult to use standard measurement approaches. After some thinking, he decided not to track his headaches, but to note each time he took his pain medicine. This was unambiguous and made his project much easier. (To find out his surprising conclusion watch his short talk: <a href="https://quantifiedself.com/show-and-tell/?project=1102" target="_blank" rel="noopener">My Headaches from Tracking Headaches</a>
.)
<img src="https://cdn.nlark.com/yuque/0/2023/png/177619/1679466951470-b007b468-5c1d-419f-a177-7b0df0177228.png#averageHue=%239c9f9a&amp;clientId=u8cbb9092-4677-4&amp;from=paste&amp;id=ub5b96d7f&amp;originHeight=572&amp;originWidth=873&amp;originalType=url&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u3b97d128-2847-472b-a6f7-0b71e057407&amp;title=" alt="low teck tracking">
Low-tech tracking: notebook from one of Amelia Greenhall’s projects.</p>
<h4 id="recording-your-observations">Recording Your Observations</h4>
<p>The material equipment for recording your observations need not be elaborate. Sometimes a smartphone and electronic sensors are useful, but there are times when a pencil and paper will do. We’ve seen many excellent self-tracking projects that involve making just one numerical measurement daily. And where the measurement is based on self-assessment, no complex technology is needed. For instance, you can record your self assessment in a notebook using a numerical scale. Examples of self-assessments we’ve seen in successful projects include:</p>
<ul>
<li>Mood before going to sleep or feeling of restedness upon awakening</li>
<li>Interference of pain with normal daily functioning</li>
<li>Subjective sense of of “readiness to train” in sports</li>
</ul>
<p>If your project requires a lot of work every day, you’re more likely to drop it before you learn anything useful. Ask yourself: How’s this process going to feel when my initial enthusiasm dips, or my work or family life requires extra attention? We’ve been privileged to work with self-trackers doing marvelously complex and demanding projects, some involving millions of observations. But among the best projects are the simplest. For inspiration, take a look at the way designer Ellis Bartholomeus collected observations about her state of mind.</p>
<h3 id="securing-access-to-your-observations">Securing Access To Your Observations</h3>
<p>Many self-tracking projects involve tools that collect observations passively. For instance, there are wearable gadgets that track activity, sleep, location, blood pressure, body temperature and heart rate. Other projects make use of tests available from a lab or pharmacy: blood glucose, ketones, cholesterol, luteinizing hormone, and many more. When you are getting started on a self-tracking project there is one especially important question you’ll want to ask about your tool: Does it give me access to my own data? Absurd as it may sound, many self-tracking tools only offer summaries of data, or only offer data in a ridiculously inconvenient format.
Here’s health educator Ilyse Magy describing the problem of a good tool with bad access. The question of access is especially important for tools that collect data passively and store it remotely. You’ll want to test for access right at the beginning of the project. Find the export data function. Take a look at the file it sends you. Is the record of your observations available in a tabular format, so that you can open it in a spreadsheet? If not, consider whether there is an equivalent tool with better access.
For combining data from different sources so that you can access it for personal reasons, we prefer to recommend tools that are specifically focused on helping individuals without exposing them to risk, such as Zenobase, created by Eric Jain, co-organizer of the Seattle Quantified Self group. If you use Apple Health, you can take advantage of our free QS Access App, which allows you to securely access most of your Apple Health data in tabular format that you can download it and open it in a spreadsheet.</p>
<h3 id="help-with-tools">Help With Tools</h3>
<p>There are many hundreds of commercial self-tracking tools that could be relevant to your project, along with countless everyday and DIY tools that might work even better. If you are looking for a specific tool, or have questions about a tool you’re currently using, try posting in the <a href="https://forum.quantifiedself.com/c/quantified-self/apps-tools" target="_blank" rel="noopener">QS Forum</a>
. We keep an eye on questions posted there and try to get them answered.</p>
<h2 id="reasoning">REASONING</h2>
<p>Now that you have the record in hand, there are many different ways to interrogate it. If you have a numerical record, you can take advantage of centuries of accumulated knowledge on teasing meaning out of data, making predictions, and increasing your confidence in connecting causes with effects. Getting meaning from data is the ultimate “low floor/high ceiling” task: there are ways to learn that are accessible to everybody, including young children; and there are approaches that may only become rewarding after years of practice. Here are three ways to reason using your observations that can work immediately.</p>
<h3 id="create-a-baseline">Create a Baseline</h3>
<p>A baseline tells you “how things are.” By carefully observing your current situation, you set yourself up for knowing when and how it changes.
<strong>Try a one number baseline</strong>: A baseline measurement can be as simple as a single number representing a single measurement. How many pushups can you do without resting? That’s your baseline for pushups. You can sometimes use a single number baseline to represent complex phenomena. For instance, the late Seth Roberts, a highly creative experimental psychologist who helped create the culture of the Quantified Self community in its first years, gave himself a simple cognitive test every morning. He paid special attention to his “record score,” a single number that helped spark new ideas about things to test when he saw an unexpected improvement. (Today, you can set up your own quick cognitive tests using the free service by Yoni Donner called “<a href="http://www.quantified-mind.com/" target="_blank" rel="noopener">Quantified Mind</a>
.”)
<strong>Make a baseline from an average</strong>: When you have a measurement that tends to jump around due to normal fluctuations in daily life (think about heart rate, blood pressure, body weight, or mood) you may need to take an average of multiple measurements to acquire a meaningful baseline. Thinking about how to use an average for your baseline will naturally push you to consider what you expect the variation from measurement to measurement to be, and how you expect it would change based on different conditions. For instance, is the baseline you create from morning measurements different than the one you create from evening measurements? This simple process of measuring a number of times and calculating the average leads directly to learning.
<strong>Collect a “bucket” of informal daily observations:</strong> Your method of creating a baseline will reflect what you hope to find out from your project. When you think about your baseline, go back to your question. What are you wondering about “how things are?” You can use a set of casual observations, even in the form of simple notes, as the baseline for your project. Your choice of what to note down expresses your sense of what factors you’re guessing may change over time.
In this video segment, you can see how college student Lydia Lutsyshyna uses descriptive notes about her daily activities, such as the names of the friends she saw each day, to anchor a self-tracking project that included an intervention.</p>
<h3 id="use-a-timeline">Use a Timeline</h3>
<p>Perhaps the most common formal tool for reasoning with data is a graph showing change over time. Whether you have just a handful of observations or many millions of them you can usually find a way to line them up in a row according to when they were made. Timelines can present fascinating – and frustrating – technical challenges, especially when dealing with big numbers and diverse observations gathered using different methods.
But a very easy way to make timeline is to take a sheet of paper and label the bottom with the times of your measurements; then mark the number given by your measurement at that time in the vertical column above. Then just draw a line between each of the measurements, like in a game of connect-the-dots: there’s your timeline. In the segment of the video we’ve cued up here, you’ll see a rather remarkable version of a basic timeline chart, created by Jon Cousins and presented at the London Quantified Self meeting in 2011.</p>
<h3 id="retrospective-annotation">Retrospective Annotation</h3>
<p>Look at the record of your observations. Is there a change over time? What are some possible reasons for this change? In many cases, the answer to this question is not obvious. In thinking about your own data, you’ll often want to explore what else was going on during this time.
Some people set out in advance to “track everything.” We have a different suggestion. Sometimes simply using your memory to reflect on what your timeline makes visible will give you ideas about causes and effects. Also, in this age of digital tools, many of the things going on in our lives create a record we can consult after the fact. Most digital photos contain a time stamp, allowing you to go back to the day of a measurement and get hints about what you may have been doing that day. If you use a digital calendar, then you will know what appointments you had. Your email also contains many details that can help you reconstruct your past. It’s often possible to annotate our observations retrospectively by going back and adding contextual descriptions to interesting moments.
When you are reasoning about your own data, consider all the digital traces you might consult. The scholar Shoshana Zuboff has described the current era as “the age of surveillance capitalism,” describing how a few powerful corporations use the digital records of our lives to monopolize power. Here, we’re proposing an alternate use for our passively collected digital traces; that is, to help us privately and personally figure something out for ourselves.</p>
<h2 id="consolidating-insight">CONSOLIDATING INSIGHT</h2>
<p>A self-tracking project is a continuous learning process, and every step, from the first moment of thinking about what questions you want to explore, offers a chance for finding something out that can be useful. However, there’s a specific activity that comes with the development of a project that support creativity and focus in thinking about your own data; that is, acting on and sharing what you know. In making decisions based on what you learned, and in describing what you’ve learned to others, you’ll often find yourself revisiting every step of the process, thinking more deeply about it, and even trying out new techniques to test and illustrate your ideas.
Again and again we’ve seen that sharing the details of a project – something that may look like a final step – is actually a way to learn more. There are many ways and places to share your project. You can present a Show&amp;Tell talk at a <a href="https://quantifiedself.com/meetups/" target="_blank" rel="noopener">local QS meetup</a>
 or Quantified Self Conference. You can write a blog post about it and post the link to twitter with the #quantifiedself hashtag so others can find it. Or you can write about it in the QS <a href="http://forum.quantifiedself.com/" target="_blank" rel="noopener">forum</a>
. Here are some practical tips for sharing your project.</p>
<h3 id="what-did-you-do-how-did-you-do-it-what-did-you-learn">“What Did You Do? How Did You Do It? What Did You Learn?”</h3>
<p>These three questions are the structure of a Quantified Self Show&amp;Tell talk. Don’t skimp on the “how.” A careful discussion of your tools and methods may be more important than the results of your project, containing seeds of new questions and ideas. And when you prepare to share your project, give some fresh thought to what you gained from doing it. We’ve seen many projects where the most useful analysis doesn’t occur until the presenter is preparing their talk! The fact that others will be listening creates a useful push toward coherence and consolidation of insight.</p>
<h3 id="be-an-honest-reporter">Be an honest reporter</h3>
<p>We learn best from honest accounting of experience. Even (and especially) when sharing with an audience of experts, there’s no need to make your results more impressive than they actually were. Things that don’t quite work can be as revealing as things that do. In an age of hype and alternative facts, it’s refreshing to hear about ideas in progress whose import is still being explored.</p>
<h3 id="resist-the-urge-to-generalize">Resist the urge to generalize</h3>
<p>Just because you experienced a result, doesn’t mean others will. In sharing self-tracking projects, your particular experiences are more valuable than broad conclusions and discoveries. A self-tracking project doesn’t typically aim to uncover a universal fact about human experience, or the norm for a group. Instead, it’s just one case. Our individual reports are valuable and instructive on their own terms, because they show what’s possible.</p>
<h3 id="value-good-questions-and-stay-in-touch">Value good questions and stay in touch</h3>
<p>Finding good questions is important. It’s where this guide began, and it’s where it ends. If your self-tracking project suggests good questions to others, you’ve given them valuable assistance; and if their questions inspire you to look again at your observations, they’ve reciprocated with something that can have great value to you. We hope we’ve encouraged you to think about what questions you have in your own life that might be tractable with empirical approaches. There is no single right way to begin. You don’t need to impress anybody or get anybody’s approval. But we do hope you’ll share what you learn with us!</p>
</description>
    </item>
    
    <item>
      <title>Bay Area Weekly Issue 1</title>
      <link>https://usistem.com/en/the-bay-area/the-bay-area-weekly-01/</link>
      <pubDate>Tue, 21 Mar 2023 11:22:33 +0800</pubDate>
      
      <guid>https://usistem.com/en/the-bay-area/the-bay-area-weekly-01/</guid>
      <description><p>This is the first issue of &ldquo;Bay Area Weekly&rdquo; maintained by <a href="https://cmcn.me/link?target=https://twitter.com/hagerhu" target="_blank" rel="noopener">@HagerHu</a>
. Bay Area Weekly focuses on the internet, technology, and startup. Make progress every week.</p>
<hr>
<h2 id="750-words">750 Words</h2>
<p>750 Words是《艺术家的方式》中所学到的晨间页面的数字版本，由 @buster  创立，用于日常记录私人日志，750 差不多是 3 页纸的字数。写作，可以在记录的过程中了解自己。</p>
<p>750 Words is basically a digital version of morning pages, an idea I learned about from Julia Cameron&rsquo;s The Artist&rsquo;s Way. It is founded by @buster for daily personal journaling. 750 is the words count of three standard pages. Learn about yourself in the writing process. Every day you write, you&rsquo;ll get beautiful stats that analyze the feelings, themes, and mindset of your words.</p>
<p><a href="https://cmcn.me/link?target=https://750words.com/" target="_blank" rel="noopener">https://cmcn.me/link?target=https://750words.com/</a>
</p>
<p><a href="https://cmcn.me/link?target=https://www.indiehackers.com/interview/how-i-bootstrapped-my-side-project-into-a-20k-mo-lifestyle-business-063525ef84" target="_blank" rel="noopener">https://cmcn.me/link?target=https://www.indiehackers.com/interview/how-i-bootstrapped-my-side-project-into-a-20k-mo-lifestyle-business-063525ef84</a>
</p>
<h2 id="lifestyle-business-beats-a-startup">Lifestyle business beats a startup</h2>
<p>Truth is that many profitable businesses, from large companies to small enterprises, are able to generate a very healthy monthly revenue. A startup is, by its very nature, small when it starts. Our lifestyle-oriented approach gives us the freedom to constantly innovate, to develop new, fun ideas, and even to reinvent ourselves every now and then.</p>
<p><a href="https://cmcn.me/link?target=https://www.indiehackers.com/@znq/why-a-lifestyle-business-beats-a-startup-44c7c6fafe" target="_blank" rel="noopener">https://cmcn.me/link?target=https://www.indiehackers.com/@znq/why-a-lifestyle-business-beats-a-startup-44c7c6fafe</a>
</p>
<h2 id="thress-things-to-create-a-successful-startup">Thress things to create a successful startup</h2>
<p>Three things to create a successful startup: to start with good people, to make something customers actually want, and to spend as little money as possible. This is the only one message to get across about startups,</p>
<p><a href="https://cmcn.me/link?target=http://paulgraham.com/start.html" target="_blank" rel="noopener">https://cmcn.me/link?target=http://paulgraham.com/start.html</a>
</p>
<h2 id="self-experimentation">Self experimentation</h2>
<p>We all know that products can undergo AB testing to validate which experiment performs better. In fact, we can also experiment with certain ideas to validate them ourselves. For example, I once wanted to track my sleep time, intentionally increase or decrease my sleep time, observe my condition during the day, and find out how much sleep I actually needed.</p>
<p><a href="https://cmcn.me/link?target=https://quantifiedself.com/blog/allen-neuringers-many-decades-of-self-experimentation/" target="_blank" rel="noopener">https://cmcn.me/link?target=https://quantifiedself.com/blog/allen-neuringers-many-decades-of-self-experimentation/</a>
</p>
</description>
    </item>
    
    <item>
      <title>Paul Graham：How to start a startup?</title>
      <link>https://usistem.com/en/the-bay-area/how-to-start-a-startup-paul-graham/</link>
      <pubDate>Tue, 14 Mar 2023 11:22:33 +0800</pubDate>
      
      <guid>https://usistem.com/en/the-bay-area/how-to-start-a-startup-paul-graham/</guid>
      <description><p><img src="https://cdn.nlark.com/yuque/0/2023/png/177619/1678763431909-af876198-8fa9-44be-a800-c5daa18325a0.png" alt="How to start a startup"></p>
<p>This article is from <a href="http://paulgraham.com/start.html" target="_blank" rel="noopener">http://paulgraham.com/start.html</a>
。Original article writen by years ago, not friendly for reading since less line content. This article is just formated for reading experience, no changes of content.</p>
<hr>
<p>You need three things to create a successful startup: to start with good people, to make something customers actually want, and to spend as little money as possible. Most startups that fail do it because they fail at one of these. A startup that does all three will probably succeed.</p>
<p>And that&rsquo;s kind of exciting, when you think about it, because all three are doable. Hard, but doable. And since a startup that succeeds ordinarily makes its founders rich, that implies getting rich is doable too. Hard, but doable.</p>
<p>If there is one message I&rsquo;d like to get across about startups, that&rsquo;s it. There is no magically difficult step that requires brilliance to solve.</p>
<h2 id="the-idea">The Idea</h2>
<p>In particular, you don&rsquo;t need a brilliant idea to start a startup around. The way a startup makes money is to offer people better technology than they have now. But what people have now is often so bad that it doesn&rsquo;t take brilliance to do better.</p>
<p>Google&rsquo;s plan, for example, was simply to create a search site that didn&rsquo;t suck. They had three new ideas: index more of the Web, use links to rank search results, and have clean, simple web pages with unintrusive keyword-based ads. Above all, they were determined to make a site that was good to use. No doubt there are great technical tricks within Google, but the overall plan was straightforward. And while they probably have bigger ambitions now, this alone brings them a billion dollars a year. [1]</p>
<p>There are plenty of other areas that are just as backward as search was before Google. I can think of several heuristics for generating ideas for startups, but most reduce to this: look at something people are trying to do, and figure out how to do it in a way that doesn&rsquo;t suck.</p>
<p>For example, dating sites currently suck far worse than search did before Google. They all use the same simple-minded model. They seem to have approached the problem by thinking about how to do database matches instead of how dating works in the real world. An undergrad could build something better as a class project. And yet there&rsquo;s a lot of money at stake. Online dating is a valuable business now, and it might be worth a hundred times as much if it worked.</p>
<p>An idea for a startup, however, is only a beginning. A lot of would-be startup founders think the key to the whole process is the initial idea, and from that point all you have to do is execute. Venture capitalists know better. If you go to VC firms with a brilliant idea that you&rsquo;ll tell them about if they sign a nondisclosure agreement, most will tell you to get lost. That shows how much a mere idea is worth. The market price is less than the inconvenience of signing an NDA.</p>
<p>Another sign of how little the initial idea is worth is the number of startups that change their plan en route. Microsoft&rsquo;s original plan was to make money selling programming languages, of all things. Their current business model didn&rsquo;t occur to them until IBM dropped it in their lap five years later.</p>
<p>Ideas for startups are worth something, certainly, but the trouble is, they&rsquo;re not transferrable. They&rsquo;re not something you could hand to someone else to execute. Their value is mainly as starting points: as questions for the people who had them to continue thinking about.</p>
<p>What matters is not ideas, but the people who have them. Good people can fix bad ideas, but good ideas can&rsquo;t save bad people.</p>
<h2 id="people">People</h2>
<p>What do I mean by good people? One of the best tricks I learned during our startup was a rule for deciding who to hire. Could you describe the person as an animal? It might be hard to translate that into another language, but I think everyone in the US knows what it means. It means someone who takes their work a little too seriously; someone who does what they do so well that they pass right through professional and cross over into obsessive.</p>
<p>What it means specifically depends on the job: a salesperson who just won&rsquo;t take no for an answer; a hacker who will stay up till 4:00 AM rather than go to bed leaving code with a bug in it; a PR person who will cold-call New York Times reporters on their cell phones; a graphic designer who feels physical pain when something is two millimeters out of place.</p>
<p>Almost everyone who worked for us was an animal at what they did. The woman in charge of sales was so tenacious that I used to feel sorry for potential customers on the phone with her. You could sense them squirming on the hook, but you knew there would be no rest for them till they&rsquo;d signed up.</p>
<p>If you think about people you know, you&rsquo;ll find the animal test is easy to apply. Call the person&rsquo;s image to mind and imagine the sentence &ldquo;so-and-so is an animal.&rdquo; If you laugh, they&rsquo;re not. You don&rsquo;t need or perhaps even want this quality in big companies, but you need it in a startup.</p>
<p>For programmers we had three additional tests. Was the person genuinely smart? If so, could they actually get things done? And finally, since a few good hackers have unbearable personalities, could we stand to have them around?</p>
<p>That last test filters out surprisingly few people. We could bear any amount of nerdiness if someone was truly smart. What we couldn&rsquo;t stand were people with a lot of attitude. But most of those weren&rsquo;t truly smart, so our third test was largely a restatement of the first.</p>
<p>When nerds are unbearable it&rsquo;s usually because they&rsquo;re trying too hard to seem smart. But the smarter they are, the less pressure they feel to act smart. So as a rule you can recognize genuinely smart people by their ability to say things like &ldquo;I don&rsquo;t know,&rdquo; &ldquo;Maybe you&rsquo;re right,&rdquo; and &ldquo;I don&rsquo;t understand x well enough.&rdquo;</p>
<p>This technique doesn&rsquo;t always work, because people can be influenced by their environment. In the MIT CS department, there seems to be a tradition of acting like a brusque know-it-all. I&rsquo;m told it derives ultimately from Marvin Minsky, in the same way the classic airline pilot manner is said to derive from Chuck Yeager. Even genuinely smart people start to act this way there, so you have to make allowances.</p>
<p>It helped us to have Robert Morris, who is one of the readiest to say &ldquo;I don&rsquo;t know&rdquo; of anyone I&rsquo;ve met. (At least, he was before he became a professor at MIT.) No one dared put on attitude around Robert, because he was obviously smarter than they were and yet had zero attitude himself.</p>
<p>Like most startups, ours began with a group of friends, and it was through personal contacts that we got most of the people we hired. This is a crucial difference between startups and big companies. Being friends with someone for even a couple days will tell you more than companies could ever learn in interviews. [2]</p>
<p>It&rsquo;s no coincidence that startups start around universities, because that&rsquo;s where smart people meet. It&rsquo;s not what people learn in classes at MIT and Stanford that has made technology companies spring up around them. They could sing campfire songs in the classes so long as admissions worked the same.</p>
<p>If you start a startup, there&rsquo;s a good chance it will be with people you know from college or grad school. So in theory you ought to try to make friends with as many smart people as you can in school, right? Well, no. Don&rsquo;t make a conscious effort to schmooze; that doesn&rsquo;t work well with hackers.</p>
<p>What you should do in college is work on your own projects. Hackers should do this even if they don&rsquo;t plan to start startups, because it&rsquo;s the only real way to learn how to program. In some cases you may collaborate with other students, and this is the best way to get to know good hackers. The project may even grow into a startup. But once again, I wouldn&rsquo;t aim too directly at either target. Don&rsquo;t force things; just work on stuff you like with people you like.</p>
<p>Ideally you want between two and four founders. It would be hard to start with just one. One person would find the moral weight of starting a company hard to bear. Even Bill Gates, who seems to be able to bear a good deal of moral weight, had to have a co-founder. But you don&rsquo;t want so many founders that the company starts to look like a group photo. Partly because you don&rsquo;t need a lot of people at first, but mainly because the more founders you have, the worse disagreements you&rsquo;ll have. When there are just two or three founders, you know you have to resolve disputes immediately or perish. If there are seven or eight, disagreements can linger and harden into factions. You don&rsquo;t want mere voting; you need unanimity.</p>
<p>In a technology startup, which most startups are, the founders should include technical people. During the Internet Bubble there were a number of startups founded by business people who then went looking for hackers to create their product for them. This doesn&rsquo;t work well. Business people are bad at deciding what to do with technology, because they don&rsquo;t know what the options are, or which kinds of problems are hard and which are easy. And when business people try to hire hackers, they can&rsquo;t tell which ones are good. Even other hackers have a hard time doing that. For business people it&rsquo;s roulette.</p>
<p>Do the founders of a startup have to include business people? That depends. We thought so when we started ours, and we asked several people who were said to know about this mysterious thing called &ldquo;business&rdquo; if they would be the president. But they all said no, so I had to do it myself. And what I discovered was that business was no great mystery. It&rsquo;s not something like physics or medicine that requires extensive study. You just try to get people to pay you for stuff.</p>
<p>I think the reason I made such a mystery of business was that I was disgusted by the idea of doing it. I wanted to work in the pure, intellectual world of software, not deal with customers&rsquo; mundane problems. People who don&rsquo;t want to get dragged into some kind of work often develop a protective incompetence at it. Paul Erdos was particularly good at this. By seeming unable even to cut a grapefruit in half (let alone go to the store and buy one), he forced other people to do such things for him, leaving all his time free for math. Erdos was an extreme case, but most husbands use the same trick to some degree.</p>
<p>Once I was forced to discard my protective incompetence, I found that business was neither so hard nor so boring as I feared. There are esoteric areas of business that are quite hard, like tax law or the pricing of derivatives, but you don&rsquo;t need to know about those in a startup. All you need to know about business to run a startup are commonsense things people knew before there were business schools, or even universities.</p>
<p>If you work your way down the Forbes 400 making an x next to the name of each person with an MBA, you&rsquo;ll learn something important about business school. After Warren Buffett, you don&rsquo;t hit another MBA till number 22, Phil Knight, the CEO of Nike. There are only 5 MBAs in the top 50. What you notice in the Forbes 400 are a lot of people with technical backgrounds. Bill Gates, Steve Jobs, Larry Ellison, Michael Dell, Jeff Bezos, Gordon Moore. The rulers of the technology business tend to come from technology, not business. So if you want to invest two years in something that will help you succeed in business, the evidence suggests you&rsquo;d do better to learn how to hack than get an MBA. [3]</p>
<p>There is one reason you might want to include business people in a startup, though: because you have to have at least one person willing and able to focus on what customers want. Some believe only business people can do this&ndash; that hackers can implement software, but not design it. That&rsquo;s nonsense. There&rsquo;s nothing about knowing how to program that prevents hackers from understanding users, or about not knowing how to program that magically enables business people to understand them.
If you can&rsquo;t understand users, however, you should either learn how or find a co-founder who can. That is the single most important issue for technology startups, and the rock that sinks more of them than anything else.</p>
<h2 id="what-customers-want">What Customers Want</h2>
<p>It&rsquo;s not just startups that have to worry about this. I think most businesses that fail do it because they don&rsquo;t give customers what they want. Look at restaurants. A large percentage fail, about a quarter in the first year. But can you think of one restaurant that had really good food and went out of business?</p>
<p>Restaurants with great food seem to prosper no matter what. A restaurant with great food can be expensive, crowded, noisy, dingy, out of the way, and even have bad service, and people will keep coming. It&rsquo;s true that a restaurant with mediocre food can sometimes attract customers through gimmicks. But that approach is very risky. It&rsquo;s more straightforward just to make the food good.</p>
<p>It&rsquo;s the same with technology. You hear all kinds of reasons why startups fail. But can you think of one that had a massively popular product and still failed?</p>
<p>In nearly every failed startup, the real problem was that customers didn&rsquo;t want the product. For most, the cause of death is listed as &ldquo;ran out of funding,&rdquo; but that&rsquo;s only the immediate cause. Why couldn&rsquo;t they get more funding? Probably because the product was a dog, or never seemed likely to be done, or both.</p>
<p>When I was trying to think of the things every startup needed to do, I almost included a fourth: get a version 1 out as soon as you can. But I decided not to, because that&rsquo;s implicit in making something customers want. The only way to make something customers want is to get a prototype in front of them and refine it based on their reactions.</p>
<p>The other approach is what I call the &ldquo;Hail Mary&rdquo; strategy. You make elaborate plans for a product, hire a team of engineers to develop it (people who do this tend to use the term &ldquo;engineer&rdquo; for hackers), and then find after a year that you&rsquo;ve spent two million dollars to develop something no one wants. This was not uncommon during the Bubble, especially in companies run by business types, who thought of software development as something terrifying that therefore had to be carefully planned.</p>
<p>We never even considered that approach. As a Lisp hacker, I come from the tradition of rapid prototyping. I would not claim (at least, not here) that this is the right way to write every program, but it&rsquo;s certainly the right way to write software for a startup. In a startup, your initial plans are almost certain to be wrong in some way, and your first priority should be to figure out where. The only way to do that is to try implementing them.</p>
<p>Like most startups, we changed our plan on the fly. At first we expected our customers to be Web consultants. But it turned out they didn&rsquo;t like us, because our software was easy to use and we hosted the site. It would be too easy for clients to fire them. We also thought we&rsquo;d be able to sign up a lot of catalog companies, because selling online was a natural extension of their existing business. But in 1996 that was a hard sell. The middle managers we talked to at catalog companies saw the Web not as an opportunity, but as something that meant more work for them.</p>
<p>We did get a few of the more adventurous catalog companies. Among them was Frederick&rsquo;s of Hollywood, which gave us valuable experience dealing with heavy loads on our servers. But most of our users were small, individual merchants who saw the Web as an opportunity to build a business. Some had retail stores, but many only existed online. And so we changed direction to focus on these users. Instead of concentrating on the features Web consultants and catalog companies would want, we worked to make the software easy to use.</p>
<p>I learned something valuable from that. It&rsquo;s worth trying very, very hard to make technology easy to use. Hackers are so used to computers that they have no idea how horrifying software seems to normal people. Stephen Hawking&rsquo;s editor told him that every equation he included in his book would cut sales in half. When you work on making technology easier to use, you&rsquo;re riding that curve up instead of down. A 10% improvement in ease of use doesn&rsquo;t just increase your sales 10%. It&rsquo;s more likely to double your sales.</p>
<p>How do you figure out what customers want? Watch them. One of the best places to do this was at trade shows. Trade shows didn&rsquo;t pay as a way of getting new customers, but they were worth it as market research. We didn&rsquo;t just give canned presentations at trade shows. We used to show people how to build real, working stores. Which meant we got to watch as they used our software, and talk to them about what they needed.</p>
<p>No matter what kind of startup you start, it will probably be a stretch for you, the founders, to understand what users want. The only kind of software you can build without studying users is the sort for which you are the typical user. But this is just the kind that tends to be open source: operating systems, programming languages, editors, and so on. So if you&rsquo;re developing technology for money, you&rsquo;re probably not going to be developing it for people like you. Indeed, you can use this as a way to generate ideas for startups: what do people who are not like you want from technology?</p>
<p>When most people think of startups, they think of companies like Apple or Google. Everyone knows these, because they&rsquo;re big consumer brands. But for every startup like that, there are twenty more that operate in niche markets or live quietly down in the infrastructure. So if you start a successful startup, odds are you&rsquo;ll start one of those.</p>
<p>Another way to say that is, if you try to start the kind of startup that has to be a big consumer brand, the odds against succeeding are steeper. The best odds are in niche markets. Since startups make money by offering people something better than they had before, the best opportunities are where things suck most. And it would be hard to find a place where things suck more than in corporate IT departments. You would not believe the amount of money companies spend on software, and the crap they get in return. This imbalance equals opportunity.</p>
<p>If you want ideas for startups, one of the most valuable things you could do is find a middle-sized non-technology company and spend a couple weeks just watching what they do with computers. Most good hackers have no more idea of the horrors perpetrated in these places than rich Americans do of what goes on in Brazilian slums.</p>
<p>Start by writing software for smaller companies, because it&rsquo;s easier to sell to them. It&rsquo;s worth so much to sell stuff to big companies that the people selling them the crap they currently use spend a lot of time and money to do it. And while you can outhack Oracle with one frontal lobe tied behind your back, you can&rsquo;t outsell an Oracle salesman. So if you want to win through better technology, aim at smaller customers. [4]</p>
<p>They&rsquo;re the more strategically valuable part of the market anyway. In technology, the low end always eats the high end. It&rsquo;s easier to make an inexpensive product more powerful than to make a powerful product cheaper. So the products that start as cheap, simple options tend to gradually grow more powerful till, like water rising in a room, they squash the &ldquo;high-end&rdquo; products against the ceiling. Sun did this to mainframes, and Intel is doing it to Sun. Microsoft Word did it to desktop publishing software like Interleaf and Framemaker. Mass-market digital cameras are doing it to the expensive models made for professionals. Avid did it to the manufacturers of specialized video editing systems, and now Apple is doing it to Avid. Henry Ford did it to the car makers that preceded him. If you build the simple, inexpensive option, you&rsquo;ll not only find it easier to sell at first, but you&rsquo;ll also be in the best position to conquer the rest of the market.</p>
<p>It&rsquo;s very dangerous to let anyone fly under you. If you have the cheapest, easiest product, you&rsquo;ll own the low end. And if you don&rsquo;t, you&rsquo;re in the crosshairs of whoever does.</p>
<h2 id="raising-money">Raising Money</h2>
<p>To make all this happen, you&rsquo;re going to need money. Some startups have been self-funding&ndash; Microsoft for example&ndash; but most aren&rsquo;t. I think it&rsquo;s wise to take money from investors. To be self-funding, you have to start as a consulting company, and it&rsquo;s hard to switch from that to a product company.</p>
<p>Financially, a startup is like a pass/fail course. The way to get rich from a startup is to maximize the company&rsquo;s chances of succeeding, not to maximize the amount of stock you retain. So if you can trade stock for something that improves your odds, it&rsquo;s probably a smart move.</p>
<p>To most hackers, getting investors seems like a terrifying and mysterious process. Actually it&rsquo;s merely tedious. I&rsquo;ll try to give an outline of how it works.</p>
<p>The first thing you&rsquo;ll need is a few tens of thousands of dollars to pay your expenses while you develop a prototype. This is called seed capital. Because so little money is involved, raising seed capital is comparatively easy&ndash; at least in the sense of getting a quick yes or no.</p>
<p>Usually you get seed money from individual rich people called &ldquo;angels.&rdquo; Often they&rsquo;re people who themselves got rich from technology. At the seed stage, investors don&rsquo;t expect you to have an elaborate business plan. Most know that they&rsquo;re supposed to decide quickly. It&rsquo;s not unusual to get a check within a week based on a half-page agreement.</p>
<p>We started Viaweb with $10,000 of seed money from our friend Julian. But he gave us a lot more than money. He&rsquo;s a former CEO and also a corporate lawyer, so he gave us a lot of valuable advice about business, and also did all the legal work of getting us set up as a company. Plus he introduced us to one of the two angel investors who supplied our next round of funding.</p>
<p>Some angels, especially those with technology backgrounds, may be satisfied with a demo and a verbal description of what you plan to do. But many will want a copy of your business plan, if only to remind themselves what they invested in.</p>
<p>Our angels asked for one, and looking back, I&rsquo;m amazed how much worry it caused me. &ldquo;Business plan&rdquo; has that word &ldquo;business&rdquo; in it, so I figured it had to be something I&rsquo;d have to read a book about business plans to write. Well, it doesn&rsquo;t. At this stage, all most investors expect is a brief description of what you plan to do and how you&rsquo;re going to make money from it, and the resumes of the founders. If you just sit down and write out what you&rsquo;ve been saying to one another, that should be fine. It shouldn&rsquo;t take more than a couple hours, and you&rsquo;ll probably find that writing it all down gives you more ideas about what to do.</p>
<p>For the angel to have someone to make the check out to, you&rsquo;re going to have to have some kind of company. Merely incorporating yourselves isn&rsquo;t hard. The problem is, for the company to exist, you have to decide who the founders are, and how much stock they each have. If there are two founders with the same qualifications who are both equally committed to the business, that&rsquo;s easy. But if you have a number of people who are expected to contribute in varying degrees, arranging the proportions of stock can be hard. And once you&rsquo;ve done it, it tends to be set in stone.</p>
<p>I have no tricks for dealing with this problem. All I can say is, try hard to do it right. I do have a rule of thumb for recognizing when you have, though. When everyone feels they&rsquo;re getting a slightly bad deal, that they&rsquo;re doing more than they should for the amount of stock they have, the stock is optimally apportioned.</p>
<p>There is more to setting up a company than incorporating it, of course: insurance, business license, unemployment compensation, various things with the IRS. I&rsquo;m not even sure what the list is, because we, ah, skipped all that. When we got real funding near the end of 1996, we hired a great CFO, who fixed everything retroactively. It turns out that no one comes and arrests you if you don&rsquo;t do everything you&rsquo;re supposed to when starting a company. And a good thing too, or a lot of startups would never get started. [5]</p>
<p>It can be dangerous to delay turning yourself into a company, because one or more of the founders might decide to split off and start another company doing the same thing. This does happen. So when you set up the company, as well as as apportioning the stock, you should get all the founders to sign something agreeing that everyone&rsquo;s ideas belong to this company, and that this company is going to be everyone&rsquo;s only job.</p>
<p>[If this were a movie, ominous music would begin here.]</p>
<p>While you&rsquo;re at it, you should ask what else they&rsquo;ve signed. One of the worst things that can happen to a startup is to run into intellectual property problems. We did, and it came closer to killing us than any competitor ever did.</p>
<p>As we were in the middle of getting bought, we discovered that one of our people had, early on, been bound by an agreement that said all his ideas belonged to the giant company that was paying for him to go to grad school. In theory, that could have meant someone else owned big chunks of our software. So the acquisition came to a screeching halt while we tried to sort this out. The problem was, since we&rsquo;d been about to be acquired, we&rsquo;d allowed ourselves to run low on cash. Now we needed to raise more to keep going. But it&rsquo;s hard to raise money with an IP cloud over your head, because investors can&rsquo;t judge how serious it is.</p>
<p>Our existing investors, knowing that we needed money and had nowhere else to get it, at this point attempted certain gambits which I will not describe in detail, except to remind readers that the word &ldquo;angel&rdquo; is a metaphor. The founders thereupon proposed to walk away from the company, after giving the investors a brief tutorial on how to administer the servers themselves. And while this was happening, the acquirers used the delay as an excuse to welch on the deal.</p>
<p>Miraculously it all turned out ok. The investors backed down; we did another round of funding at a reasonable valuation; the giant company finally gave us a piece of paper saying they didn&rsquo;t own our software; and six months later we were bought by Yahoo for much more than the earlier acquirer had agreed to pay. So we were happy in the end, though the experience probably took several years off my life.</p>
<p>Don&rsquo;t do what we did. Before you consummate a startup, ask everyone about their previous IP history.</p>
<p>Once you&rsquo;ve got a company set up, it may seem presumptuous to go knocking on the doors of rich people and asking them to invest tens of thousands of dollars in something that is really just a bunch of guys with some ideas. But when you look at it from the rich people&rsquo;s point of view, the picture is more encouraging. Most rich people are looking for good investments. If you really think you have a chance of succeeding, you&rsquo;re doing them a favor by letting them invest. Mixed with any annoyance they might feel about being approached will be the thought: are these guys the next Google?</p>
<p>Usually angels are financially equivalent to founders. They get the same kind of stock and get diluted the same amount in future rounds. How much stock should they get? That depends on how ambitious you feel. When you offer x percent of your company for y dollars, you&rsquo;re implicitly claiming a certain value for the whole company. Venture investments are usually described in terms of that number. If you give an investor new shares equal to 5% of those already outstanding in return for $100,000, then you&rsquo;ve done the deal at a pre-money valuation of $2 million.</p>
<p>How do you decide what the value of the company should be? There is no rational way. At this stage the company is just a bet. I didn&rsquo;t realize that when we were raising money. Julian thought we ought to value the company at several million dollars. I thought it was preposterous to claim that a couple thousand lines of code, which was all we had at the time, were worth several million dollars. Eventually we settled on one million, because Julian said no one would invest in a company with a valuation any lower. [6]</p>
<p>What I didn&rsquo;t grasp at the time was that the valuation wasn&rsquo;t just the value of the code we&rsquo;d written so far. It was also the value of our ideas, which turned out to be right, and of all the future work we&rsquo;d do, which turned out to be a lot.</p>
<p>The next round of funding is the one in which you might deal with actual venture capital firms. But don&rsquo;t wait till you&rsquo;ve burned through your last round of funding to start approaching them. VCs are slow to make up their minds. They can take months. You don&rsquo;t want to be running out of money while you&rsquo;re trying to negotiate with them.</p>
<p>Getting money from an actual VC firm is a bigger deal than getting money from angels. The amounts of money involved are larger, millions usually. So the deals take longer, dilute you more, and impose more onerous conditions.</p>
<p>Sometimes the VCs want to install a new CEO of their own choosing. Usually the claim is that you need someone mature and experienced, with a business background. Maybe in some cases this is true. And yet Bill Gates was young and inexperienced and had no business background, and he seems to have done ok. Steve Jobs got booted out of his own company by someone mature and experienced, with a business background, who then proceeded to ruin the company. So I think people who are mature and experienced, with a business background, may be overrated. We used to call these guys &ldquo;newscasters,&rdquo; because they had neat hair and spoke in deep, confident voices, and generally didn&rsquo;t know much more than they read on the teleprompter.</p>
<p>We talked to a number of VCs, but eventually we ended up financing our startup entirely with angel money. The main reason was that we feared a brand-name VC firm would stick us with a newscaster as part of the deal. That might have been ok if he was content to limit himself to talking to the press, but what if he wanted to have a say in running the company? That would have led to disaster, because our software was so complex. We were a company whose whole m.o. was to win through better technology. The strategic decisions were mostly decisions about technology, and we didn&rsquo;t need any help with those.</p>
<p>This was also one reason we didn&rsquo;t go public. Back in 1998 our CFO tried to talk me into it. In those days you could go public as a dogfood portal, so as a company with a real product and real revenues, we might have done well. But I feared it would have meant taking on a newscaster&ndash; someone who, as they say, &ldquo;can talk Wall Street&rsquo;s language.&rdquo;</p>
<p>I&rsquo;m happy to see Google is bucking that trend. They didn&rsquo;t talk Wall Street&rsquo;s language when they did their IPO, and Wall Street didn&rsquo;t buy. And now Wall Street is collectively kicking itself. They&rsquo;ll pay attention next time. Wall Street learns new languages fast when money is involved.</p>
<p>You have more leverage negotiating with VCs than you realize. The reason is other VCs. I know a number of VCs now, and when you talk to them you realize that it&rsquo;s a seller&rsquo;s market. Even now there is too much money chasing too few good deals.</p>
<p>VCs form a pyramid. At the top are famous ones like Sequoia and Kleiner Perkins, but beneath those are a huge number you&rsquo;ve never heard of. What they all have in common is that a dollar from them is worth one dollar. Most VCs will tell you that they don&rsquo;t just provide money, but connections and advice. If you&rsquo;re talking to Vinod Khosla or John Doerr or Mike Moritz, this is true. But such advice and connections can come very expensive. And as you go down the food chain the VCs get rapidly dumber. A few steps down from the top you&rsquo;re basically talking to bankers who&rsquo;ve picked up a few new vocabulary words from reading Wired. (Does your product use XML?) So I&rsquo;d advise you to be skeptical about claims of experience and connections. Basically, a VC is a source of money. I&rsquo;d be inclined to go with whoever offered the most money the soonest with the least strings attached.</p>
<p>You may wonder how much to tell VCs. And you should, because some of them may one day be funding your competitors. I think the best plan is not to be overtly secretive, but not to tell them everything either. After all, as most VCs say, they&rsquo;re more interested in the people than the ideas. The main reason they want to talk about your idea is to judge you, not the idea. So as long as you seem like you know what you&rsquo;re doing, you can probably keep a few things back from them. [7]</p>
<p>Talk to as many VCs as you can, even if you don&rsquo;t want their money, because a) they may be on the board of someone who will buy you, and b) if you seem impressive, they&rsquo;ll be discouraged from investing in your competitors. The most efficient way to reach VCs, especially if you only want them to know about you and don&rsquo;t want their money, is at the conferences that are occasionally organized for startups to present to them.</p>
<h2 id="not-spending-it">Not Spending It</h2>
<p>When and if you get an infusion of real money from investors, what should you do with it? Not spend it, that&rsquo;s what. In nearly every startup that fails, the proximate cause is running out of money. Usually there is something deeper wrong. But even a proximate cause of death is worth trying hard to avoid.</p>
<p>During the Bubble many startups tried to &ldquo;get big fast.&rdquo; Ideally this meant getting a lot of customers fast. But it was easy for the meaning to slide over into hiring a lot of people fast.</p>
<p>Of the two versions, the one where you get a lot of customers fast is of course preferable. But even that may be overrated. The idea is to get there first and get all the users, leaving none for competitors. But I think in most businesses the advantages of being first to market are not so overwhelmingly great. Google is again a case in point. When they appeared it seemed as if search was a mature market, dominated by big players who&rsquo;d spent millions to build their brands: Yahoo, Lycos, Excite, Infoseek, Altavista, Inktomi. Surely 1998 was a little late to arrive at the party.</p>
<p>But as the founders of Google knew, brand is worth next to nothing in the search business. You can come along at any point and make something better, and users will gradually seep over to you. As if to emphasize the point, Google never did any advertising. They&rsquo;re like dealers; they sell the stuff, but they know better than to use it themselves.</p>
<p>The competitors Google buried would have done better to spend those millions improving their software. Future startups should learn from that mistake. Unless you&rsquo;re in a market where products are as undifferentiated as cigarettes or vodka or laundry detergent, spending a lot on brand advertising is a sign of breakage. And few if any Web businesses are so undifferentiated. The dating sites are running big ad campaigns right now, which is all the more evidence they&rsquo;re ripe for the picking. (Fee, fie, fo, fum, I smell a company run by marketing guys.)</p>
<p>We were compelled by circumstances to grow slowly, and in retrospect it was a good thing. The founders all learned to do every job in the company. As well as writing software, I had to do sales and customer support. At sales I was not very good. I was persistent, but I didn&rsquo;t have the smoothness of a good salesman. My message to potential customers was: you&rsquo;d be stupid not to sell online, and if you sell online you&rsquo;d be stupid to use anyone else&rsquo;s software. Both statements were true, but that&rsquo;s not the way to convince people.</p>
<p>I was great at customer support though. Imagine talking to a customer support person who not only knew everything about the product, but would apologize abjectly if there was a bug, and then fix it immediately, while you were on the phone with them. Customers loved us. And we loved them, because when you&rsquo;re growing slow by word of mouth, your first batch of users are the ones who were smart enough to find you by themselves. There is nothing more valuable, in the early stages of a startup, than smart users. If you listen to them, they&rsquo;ll tell you exactly how to make a winning product. And not only will they give you this advice for free, they&rsquo;ll pay you.</p>
<p>We officially launched in early 1996. By the end of that year we had about 70 users. Since this was the era of &ldquo;get big fast,&rdquo; I worried about how small and obscure we were. But in fact we were doing exactly the right thing. Once you get big (in users or employees) it gets hard to change your product. That year was effectively a laboratory for improving our software. By the end of it, we were so far ahead of our competitors that they never had a hope of catching up. And since all the hackers had spent many hours talking to users, we understood online commerce way better than anyone else.</p>
<p>That&rsquo;s the key to success as a startup. There is nothing more important than understanding your business. You might think that anyone in a business must, ex officio, understand it. Far from it. Google&rsquo;s secret weapon was simply that they understood search. I was working for Yahoo when Google appeared, and Yahoo didn&rsquo;t understand search. I know because I once tried to convince the powers that be that we had to make search better, and I got in reply what was then the party line about it: that Yahoo was no longer a mere &ldquo;search engine.&rdquo; Search was now only a small percentage of our page views, less than one month&rsquo;s growth, and now that we were established as a &ldquo;media company,&rdquo; or &ldquo;portal,&rdquo; or whatever we were, search could safely be allowed to wither and drop off, like an umbilical cord.</p>
<p>Well, a small fraction of page views they may be, but they are an important fraction, because they are the page views that Web sessions start with. I think Yahoo gets that now.</p>
<p>Google understands a few other things most Web companies still don&rsquo;t. The most important is that you should put users before advertisers, even though the advertisers are paying and users aren&rsquo;t. One of my favorite bumper stickers reads &ldquo;if the people lead, the leaders will follow.&rdquo; Paraphrased for the Web, this becomes &ldquo;get all the users, and the advertisers will follow.&rdquo; More generally, design your product to please users first, and then think about how to make money from it. If you don&rsquo;t put users first, you leave a gap for competitors who do.</p>
<p>To make something users love, you have to understand them. And the bigger you are, the harder that is. So I say &ldquo;get big slow.&rdquo; The slower you burn through your funding, the more time you have to learn.</p>
<p>The other reason to spend money slowly is to encourage a culture of cheapness. That&rsquo;s something Yahoo did understand. David Filo&rsquo;s title was &ldquo;Chief Yahoo,&rdquo; but he was proud that his unofficial title was &ldquo;Cheap Yahoo.&rdquo; Soon after we arrived at Yahoo, we got an email from Filo, who had been crawling around our directory hierarchy, asking if it was really necessary to store so much of our data on expensive RAID drives. I was impressed by that. Yahoo&rsquo;s market cap then was already in the billions, and they were still worrying about wasting a few gigs of disk space.</p>
<p>When you get a couple million dollars from a VC firm, you tend to feel rich. It&rsquo;s important to realize you&rsquo;re not. A rich company is one with large revenues. This money isn&rsquo;t revenue. It&rsquo;s money investors have given you in the hope you&rsquo;ll be able to generate revenues. So despite those millions in the bank, you&rsquo;re still poor.</p>
<p>For most startups the model should be grad student, not law firm. Aim for cool and cheap, not expensive and impressive. For us the test of whether a startup understood this was whether they had Aeron chairs. The Aeron came out during the Bubble and was very popular with startups. Especially the type, all too common then, that was like a bunch of kids playing house with money supplied by VCs. We had office chairs so cheap that the arms all fell off. This was slightly embarrassing at the time, but in retrospect the grad-studenty atmosphere of our office was another of those things we did right without knowing it.</p>
<p>Our offices were in a wooden triple-decker in Harvard Square. It had been an apartment until about the 1970s, and there was still a claw-footed bathtub in the bathroom. It must once have been inhabited by someone fairly eccentric, because a lot of the chinks in the walls were stuffed with aluminum foil, as if to protect against cosmic rays. When eminent visitors came to see us, we were a bit sheepish about the low production values. But in fact that place was the perfect space for a startup. We felt like our role was to be impudent underdogs instead of corporate stuffed shirts, and that is exactly the spirit you want.</p>
<p>An apartment is also the right kind of place for developing software. Cube farms suck for that, as you&rsquo;ve probably discovered if you&rsquo;ve tried it. Ever notice how much easier it is to hack at home than at work? So why not make work more like home?</p>
<p>When you&rsquo;re looking for space for a startup, don&rsquo;t feel that it has to look professional. Professional means doing good work, not elevators and glass walls. I&rsquo;d advise most startups to avoid corporate space at first and just rent an apartment. You want to live at the office in a startup, so why not have a place designed to be lived in as your office?</p>
<p>Besides being cheaper and better to work in, apartments tend to be in better locations than office buildings. And for a startup location is very important. The key to productivity is for people to come back to work after dinner. Those hours after the phone stops ringing are by far the best for getting work done. Great things happen when a group of employees go out to dinner together, talk over ideas, and then come back to their offices to implement them. So you want to be in a place where there are a lot of restaurants around, not some dreary office park that&rsquo;s a wasteland after 6:00 PM. Once a company shifts over into the model where everyone drives home to the suburbs for dinner, however late, you&rsquo;ve lost something extraordinarily valuable. God help you if you actually start in that mode.</p>
<p>If I were going to start a startup today, there are only three places I&rsquo;d consider doing it: on the Red Line near Central, Harvard, or Davis Squares (Kendall is too sterile); in Palo Alto on University or California Aves; and in Berkeley immediately north or south of campus. These are the only places I know that have the right kind of vibe.</p>
<p>The most important way to not spend money is by not hiring people. I may be an extremist, but I think hiring people is the worst thing a company can do. To start with, people are a recurring expense, which is the worst kind. They also tend to cause you to grow out of your space, and perhaps even move to the sort of uncool office building that will make your software worse. But worst of all, they slow you down: instead of sticking your head in someone&rsquo;s office and checking out an idea with them, eight people have to have a meeting about it. So the fewer people you can hire, the better.</p>
<p>During the Bubble a lot of startups had the opposite policy. They wanted to get &ldquo;staffed up&rdquo; as soon as possible, as if you couldn&rsquo;t get anything done unless there was someone with the corresponding job title. That&rsquo;s big company thinking. Don&rsquo;t hire people to fill the gaps in some a priori org chart. The only reason to hire someone is to do something you&rsquo;d like to do but can&rsquo;t.</p>
<p>If hiring unnecessary people is expensive and slows you down, why do nearly all companies do it? I think the main reason is that people like the idea of having a lot of people working for them. This weakness often extends right up to the CEO. If you ever end up running a company, you&rsquo;ll find the most common question people ask is how many employees you have. This is their way of weighing you. It&rsquo;s not just random people who ask this; even reporters do. And they&rsquo;re going to be a lot more impressed if the answer is a thousand than if it&rsquo;s ten.</p>
<p>This is ridiculous, really. If two companies have the same revenues, it&rsquo;s the one with fewer employees that&rsquo;s more impressive. When people used to ask me how many people our startup had, and I answered &ldquo;twenty,&rdquo; I could see them thinking that we didn&rsquo;t count for much. I used to want to add &ldquo;but our main competitor, whose ass we regularly kick, has a hundred and forty, so can we have credit for the larger of the two numbers?&rdquo;</p>
<p>As with office space, the number of your employees is a choice between seeming impressive, and being impressive. Any of you who were nerds in high school know about this choice. Keep doing it when you start a company.</p>
<h2 id="should-you">Should You?</h2>
<p>But should you start a company? Are you the right sort of person to do it? If you are, is it worth it?</p>
<p>More people are the right sort of person to start a startup than realize it. That&rsquo;s the main reason I wrote this. There could be ten times more startups than there are, and that would probably be a good thing.</p>
<p>I was, I now realize, exactly the right sort of person to start a startup. But the idea terrified me at first. I was forced into it because I was a Lisp hacker. The company I&rsquo;d been consulting for seemed to be running into trouble, and there were not a lot of other companies using Lisp. Since I couldn&rsquo;t bear the thought of programming in another language (this was 1995, remember, when &ldquo;another language&rdquo; meant C++) the only option seemed to be to start a new company using Lisp.</p>
<p>I realize this sounds far-fetched, but if you&rsquo;re a Lisp hacker you&rsquo;ll know what I mean. And if the idea of starting a startup frightened me so much that I only did it out of necessity, there must be a lot of people who would be good at it but who are too intimidated to try.</p>
<p>So who should start a startup? Someone who is a good hacker, between about 23 and 38, and who wants to solve the money problem in one shot instead of getting paid gradually over a conventional working life.</p>
<p>I can&rsquo;t say precisely what a good hacker is. At a first rate university this might include the top half of computer science majors. Though of course you don&rsquo;t have to be a CS major to be a hacker; I was a philosophy major in college.</p>
<p>It&rsquo;s hard to tell whether you&rsquo;re a good hacker, especially when you&rsquo;re young. Fortunately the process of starting startups tends to select them automatically. What drives people to start startups is (or should be) looking at existing technology and thinking, don&rsquo;t these guys realize they should be doing x, y, and z? And that&rsquo;s also a sign that one is a good hacker.</p>
<p>I put the lower bound at 23 not because there&rsquo;s something that doesn&rsquo;t happen to your brain till then, but because you need to see what it&rsquo;s like in an existing business before you try running your own. The business doesn&rsquo;t have to be a startup. I spent a year working for a software company to pay off my college loans. It was the worst year of my adult life, but I learned, without realizing it at the time, a lot of valuable lessons about the software business. In this case they were mostly negative lessons: don&rsquo;t have a lot of meetings; don&rsquo;t have chunks of code that multiple people own; don&rsquo;t have a sales guy running the company; don&rsquo;t make a high-end product; don&rsquo;t let your code get too big; don&rsquo;t leave finding bugs to QA people; don&rsquo;t go too long between releases; don&rsquo;t isolate developers from users; don&rsquo;t move from Cambridge to Route 128; and so on. [8] But negative lessons are just as valuable as positive ones. Perhaps even more valuable: it&rsquo;s hard to repeat a brilliant performance, but it&rsquo;s straightforward to avoid errors. [9]</p>
<p>The other reason it&rsquo;s hard to start a company before 23 is that people won&rsquo;t take you seriously. VCs won&rsquo;t trust you, and will try to reduce you to a mascot as a condition of funding. Customers will worry you&rsquo;re going to flake out and leave them stranded. Even you yourself, unless you&rsquo;re very unusual, will feel your age to some degree; you&rsquo;ll find it awkward to be the boss of someone much older than you, and if you&rsquo;re 21, hiring only people younger rather limits your options.</p>
<p>Some people could probably start a company at 18 if they wanted to. Bill Gates was 19 when he and Paul Allen started Microsoft. (Paul Allen was 22, though, and that probably made a difference.) So if you&rsquo;re thinking, I don&rsquo;t care what he says, I&rsquo;m going to start a company now, you may be the sort of person who could get away with it.</p>
<p>The other cutoff, 38, has a lot more play in it. One reason I put it there is that I don&rsquo;t think many people have the physical stamina much past that age. I used to work till 2:00 or 3:00 AM every night, seven days a week. I don&rsquo;t know if I could do that now.</p>
<p>Also, startups are a big risk financially. If you try something that blows up and leaves you broke at 26, big deal; a lot of 26 year olds are broke. By 38 you can&rsquo;t take so many risks&ndash; especially if you have kids.</p>
<p>My final test may be the most restrictive. Do you actually want to start a startup? What it amounts to, economically, is compressing your working life into the smallest possible space. Instead of working at an ordinary rate for 40 years, you work like hell for four. And maybe end up with nothing&ndash; though in that case it probably won&rsquo;t take four years.</p>
<p>During this time you&rsquo;ll do little but work, because when you&rsquo;re not working, your competitors will be. My only leisure activities were running, which I needed to do to keep working anyway, and about fifteen minutes of reading a night. I had a girlfriend for a total of two months during that three year period. Every couple weeks I would take a few hours off to visit a used bookshop or go to a friend&rsquo;s house for dinner. I went to visit my family twice. Otherwise I just worked.</p>
<p>Working was often fun, because the people I worked with were some of my best friends. Sometimes it was even technically interesting. But only about 10% of the time. The best I can say for the other 90% is that some of it is funnier in hindsight than it seemed then. Like the time the power went off in Cambridge for about six hours, and we made the mistake of trying to start a gasoline powered generator inside our offices. I won&rsquo;t try that again.</p>
<p>I don&rsquo;t think the amount of bullshit you have to deal with in a startup is more than you&rsquo;d endure in an ordinary working life. It&rsquo;s probably less, in fact; it just seems like a lot because it&rsquo;s compressed into a short period. So mainly what a startup buys you is time. That&rsquo;s the way to think about it if you&rsquo;re trying to decide whether to start one. If you&rsquo;re the sort of person who would like to solve the money problem once and for all instead of working for a salary for 40 years, then a startup makes sense.</p>
<p>For a lot of people the conflict is between startups and graduate school. Grad students are just the age, and just the sort of people, to start software startups. You may worry that if you do you&rsquo;ll blow your chances of an academic career. But it&rsquo;s possible to be part of a startup and stay in grad school, especially at first. Two of our three original hackers were in grad school the whole time, and both got their degrees. There are few sources of energy so powerful as a procrastinating grad student.</p>
<p>If you do have to leave grad school, in the worst case it won&rsquo;t be for too long. If a startup fails, it will probably fail quickly enough that you can return to academic life. And if it succeeds, you may find you no longer have such a burning desire to be an assistant professor.</p>
<p>If you want to do it, do it. Starting a startup is not the great mystery it seems from outside. It&rsquo;s not something you have to know about &ldquo;business&rdquo; to do. Build something users love, and spend less than you make. How hard is that?</p>
<h2 id="notes">Notes</h2>
<p>[1] Google&rsquo;s revenues are about two billion a year, but half comes from ads on other sites.</p>
<p>[2] One advantage startups have over established companies is that there are no discrimination laws about starting businesses. For example, I would be reluctant to start a startup with a woman who had small children, or was likely to have them soon. But you&rsquo;re not allowed to ask prospective employees if they plan to have kids soon. Believe it or not, under current US law, you&rsquo;re not even allowed to discriminate on the basis of intelligence. Whereas when you&rsquo;re starting a company, you can discriminate on any basis you want about who you start it with.</p>
<p>[3] Learning to hack is a lot cheaper than business school, because you can do it mostly on your own. For the price of a Linux box, a copy of K&amp;R, and a few hours of advice from your neighbor&rsquo;s fifteen year old son, you&rsquo;ll be well on your way.</p>
<p>[4] Corollary: Avoid starting a startup to sell things to the biggest company of all, the government. Yes, there are lots of opportunities to sell them technology. But let someone else start those startups.</p>
<p>[5] A friend who started a company in Germany told me they do care about the paperwork there, and that there&rsquo;s more of it. Which helps explain why there are not more startups in Germany.</p>
<p>[6] At the seed stage our valuation was in principle $100,000, because Julian got 10% of the company. But this is a very misleading number, because the money was the least important of the things Julian gave us.</p>
<p>[7] The same goes for companies that seem to want to acquire you. There will be a few that are only pretending to in order to pick your brains. But you can never tell for sure which these are, so the best approach is to seem entirely open, but to fail to mention a few critical technical secrets.</p>
<p>[8] I was as bad an employee as this place was a company. I apologize to anyone who had to work with me there.</p>
<p>[9] You could probably write a book about how to succeed in business by doing everything in exactly the opposite way from the DMV.</p>
<p>Thanks to Trevor Blackwell, Sarah Harlin, Jessica Livingston, and Robert Morris for reading drafts of this essay, and to Steve Melendez and Gregory Price for inviting me to speak.</p>
</description>
    </item>
    
  </channel>
</rss>
